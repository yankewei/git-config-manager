package gitcfg

// RepositoryType captures the high level kind of git repository detected by the scanner.
type RepositoryType string

const (
	RepositoryTypeStandard  RepositoryType = "standard"
	RepositoryTypeBare      RepositoryType = "bare"
	RepositoryTypeWorktree  RepositoryType = "worktree"
	RepositoryTypeSubmodule RepositoryType = "submodule"
	RepositoryTypeUnknown   RepositoryType = "unknown"
)

// Repository represents a single git repository, including worktrees and submodules.
type Repository struct {
	ID           string         `json:"id"`
	Name         string         `json:"name"`
	Path         string         `json:"path"`
	Root         string         `json:"root"`
	Type         RepositoryType `json:"type"`
	ParentID     string         `json:"parentId,omitempty"`
	IsBare       bool           `json:"isBare"`
	IsWorktree   bool           `json:"isWorktree"`
	IsSubmodule  bool           `json:"isSubmodule"`
	GitDir       string         `json:"gitDir"`
	LastScanTime string         `json:"lastScanTime"`
	Status       RepoStatus     `json:"status"`
}

// RepoStatus describes the freshness of a repository scan.
type RepoStatus string

const (
	RepoStatusIdle     RepoStatus = "idle"
	RepoStatusScanning RepoStatus = "scanning"
	RepoStatusError    RepoStatus = "error"
)

// ConfigScope represents the scope layer of a git configuration value.
type ConfigScope string

const (
	ConfigScopeSystem   ConfigScope = "system"
	ConfigScopeGlobal   ConfigScope = "global"
	ConfigScopeInclude  ConfigScope = "include"
	ConfigScopeLocal    ConfigScope = "local"
	ConfigScopeWorktree ConfigScope = "worktree"
	ConfigScopeEnv      ConfigScope = "env"
)

// ConfigSource tracks where a value originates from for provenance information.
type ConfigSource struct {
	Scope ConfigScope `json:"scope"`
	File  string      `json:"file,omitempty"`
	Line  int         `json:"line,omitempty"`
}

// ConfigOverride captures values that were overridden by a higher priority scope.
type ConfigOverride struct {
	Value     string       `json:"value"`
	Source    ConfigSource `json:"source"`
	Timestamp string       `json:"timestamp"`
}

// ConfigValue represents the resolved value and the provenance metadata for a key.
type ConfigValue struct {
	Key          string           `json:"key"`
	Value        string           `json:"value"`
	Source       ConfigSource     `json:"source"`
	Overrides    []ConfigOverride `json:"overrides,omitempty"`
	LastModified string           `json:"lastModified"`
}

// ConfigMatrix aggregates values for a specific repository across the supported scopes.
type ConfigMatrix struct {
	RepositoryID string                 `json:"repositoryId"`
	Entries      map[string]ConfigValue `json:"entries"`
	RetrievedAt  string                 `json:"retrievedAt"`
}

// IncludeRule encapsulates a single includeIf rule.
type IncludeRule struct {
	ID          string         `json:"id"`
	Pattern     string         `json:"pattern"`
	TargetPath  string         `json:"targetPath"`
	Enabled     bool           `json:"enabled"`
	Conflicts   []RuleConflict `json:"conflicts,omitempty"`
	LastUpdated string         `json:"lastUpdated"`
}

// RuleConflict details a conflict between include rules.
type RuleConflict struct {
	RuleID string `json:"ruleId"`
	Reason string `json:"reason"`
}

// WriteRequest contains the inputs for writing or updating configuration.
type WriteRequest struct {
	RepositoryID string      `json:"repositoryId"`
	Scope        ConfigScope `json:"scope"`
	Key          string      `json:"key"`
	Value        string      `json:"value"`
	TargetPath   string      `json:"targetPath,omitempty"`
	DryRun       bool        `json:"dryRun"`
}

// ChangeSet describes the diff generated by a rewrite along with backup metadata.
type ChangeSet struct {
	ID           string      `json:"id"`
	RepositoryID string      `json:"repositoryId"`
	Scope        ConfigScope `json:"scope"`
	FilePath     string      `json:"filePath"`
	Diff         string      `json:"diff"`
	BackupPath   string      `json:"backupPath"`
	CreatedAt    string      `json:"createdAt"`
}

// DiagnosticsReport contains parity information between internal parsing and git CLI output.
type DiagnosticsReport struct {
	RepositoryID string            `json:"repositoryId"`
	CheckedAt    string            `json:"checkedAt"`
	Issues       []DiagnosticIssue `json:"issues,omitempty"`
}

// DiagnosticIssue captures mismatches or potential problems detected during validation.
type DiagnosticIssue struct {
	Severity    string `json:"severity"`
	Message     string `json:"message"`
	Suggestion  string `json:"suggestion,omitempty"`
	RelatedFile string `json:"relatedFile,omitempty"`
}

// ScanOptions contains switches for repository scanning behaviour.
type ScanOptions struct {
	ForceRefresh bool `json:"forceRefresh"`
}
